analyzer:
  strong-mode:
    implicit-casts: false

# Lint rules and documentation, see http://dart-lang.github.io/linter/lints
linter:
  rules:
    - always_declare_return_types
    # - always_put_control_body_on_new_line # single line if's are fine
    - always_put_required_named_parameters_first
    - always_require_non_null_named_parameters
    # - always_specify_types # dart is sound, specifying types is not required anymore
    - annotate_overrides
    # - avoid_annotating_with_dynamic # don't leave the type blank, always specify dynamic
    # - avoid_as # too many false positives
    - avoid_bool_literals_in_conditional_expressions
    # - avoid_catches_without_on_clauses # check is too strict
    - avoid_catching_errors
    - avoid_classes_with_only_static_members
    - avoid_double_and_int_checks
    - avoid_empty_else
    - avoid_field_initializers_in_const_classes
    - avoid_function_literals_in_foreach_calls
    - avoid_implementing_value_types
    - avoid_init_to_null
    - avoid_js_rounded_ints
    - avoid_null_checks_in_equality_operators
    - avoid_positional_boolean_parameters
    - avoid_private_typedef_functions
    - avoid_relative_lib_imports
    - avoid_renaming_method_parameters
    - avoid_return_types_on_setters
    # - avoid_returning_null # nullable int is fine
    - avoid_returning_null_for_future
    - avoid_returning_null_for_void
    - avoid_returning_this
    - avoid_setters_without_getters
    - avoid_shadowing_type_parameters
    - avoid_single_cascade_in_expression_statements
    # - avoid_slow_async_io # no io in this project
    - avoid_types_as_parameter_names
    # - avoid_types_on_closure_parameters # adding types depends on personal taste. Often makes code better readable
    - avoid_unused_constructor_parameters
    - avoid_void_async
    - await_only_futures
    - camel_case_types
    - cancel_subscriptions
    # - cascade_invocations # cascade syntax often sucks
    # - close_sinks # no sinks in this project
    - comment_references
    - constant_identifier_names
    - control_flow_in_finally
    - curly_braces_in_flow_control_structures
    # - diagnostic_describe_all_properties # not worth it
    - directives_ordering
    - empty_catches
    - empty_constructor_bodies
    - empty_statements
    - file_names
    - flutter_style_todos
    - hash_and_equals
    - implementation_imports
    - invariant_booleans
    - iterable_contains_unrelated_type
    - join_return_with_assignment
    - library_names
    - library_prefixes
    # - lines_longer_than_80_chars # manually wrapping comments its stupid
    - list_remove_unrelated_type
    - literal_only_boolean_expressions # good for libraries, bad when relying on auto-generated code in apps
    - no_adjacent_strings_in_list
    - no_duplicate_case_values
    - non_constant_identifier_names
    - null_closures
    # - omit_local_variable_types # If the type helps readability, go for it
    - one_member_abstracts
    - only_throw_errors
    - overridden_fields
    - package_api_docs
    - package_names
    - package_prefixed_library_names
    - parameter_assignments
    - prefer_adjacent_string_concatenation
    - prefer_asserts_in_initializer_lists
    - prefer_collection_literals
    # - prefer_asserts_with_message # block asserts don't require a message as they usually throw good errors
    - prefer_conditional_assignment
    - prefer_const_constructors
    - prefer_const_constructors_in_immutables
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables
    - prefer_constructors_over_static_methods
    - prefer_contains
    # - prefer_double_quotes
    - prefer_equal_for_default_values
    # - prefer_expression_function_bodies # doesn't allow comments on that line, not good for long methods
    - prefer_final_fields
    - prefer_final_in_for_each
    - prefer_final_locals
    - prefer_for_elements_to_map_fromIterable
    # - prefer_foreach # dense code != good code
    - prefer_function_declarations_over_variables
    - prefer_generic_function_type_aliases
    - prefer_if_elements_to_conditional_expressions
    - prefer_if_null_operators
    - prefer_initializing_formals
    - prefer_inlined_adds
    - prefer_int_literals
    - prefer_interpolation_to_compose_strings
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_iterable_whereType
    # - prefer_mixin # implementer can't force libs to use mixin
    - prefer_null_aware_operators
    - prefer_single_quotes
    - prefer_spread_collections
    - prefer_typing_uninitialized_variables
    - prefer_void_to_null
    - provide_deprecation_message
    - public_member_api_docs
    - recursive_getters
    - slash_for_doc_comments
    - sort_child_properties_last
    - sort_constructors_first
    - sort_pub_dependencies
    - sort_unnamed_constructors_first
    - test_types_in_equals
    - throw_in_finally
    - type_annotate_public_apis
    - type_init_formals
    - unawaited_futures
    - unnecessary_await_in_return
    - unnecessary_brace_in_string_interps
    - unnecessary_const
    - unnecessary_getters_setters
    # - unnecessary_lambdas # generics are not properly forwarded without lambda
    - unnecessary_new
    - unnecessary_null_aware_assignments
    - unnecessary_null_in_if_null_operators
    - unnecessary_overrides
    - unnecessary_parenthesis
    - unnecessary_statements
    - unnecessary_this
    - unrelated_type_equality_checks
    - use_full_hex_values_for_flutter_colors
    #- use_function_type_syntax_for_parameters # makes reading function signatures even harder
    #- unsafe_html # web only
    - use_rethrow_when_possible
    - use_setters_to_change_properties
    - use_string_buffers
    #- use_to_and_as_if_applicable # naming is hard, rules don't help
    - valid_regexps
    - void_checks